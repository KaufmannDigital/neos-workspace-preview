<?php
namespace Flownative\WorkspacePreview\Controller;

use Neos\ContentRepository\Domain\Service\ContextFactoryInterface;
use Neos\Flow\Annotations as Flow;
use Neos\Flow\Mvc\ActionRequest;
use Neos\Flow\Security\Authentication\Controller\AbstractAuthenticationController;
use Neos\Flow\Session\Session;
use Neos\Neos\Domain\Service\ContentContext;
use Flownative\TokenAuthentication\Security\Repository\HashAndRolesRepository;

/**
 *
 */
class HashTokenLoginController extends AbstractAuthenticationController
{
    /**
     * @Flow\Inject
     * @var HashAndRolesRepository
     */
    protected $hashAndRolesRepository;

    /**
     * @Flow\Inject
     * @var ContextFactoryInterface
     */
    protected $contextFactory;

    /**
     * @Flow\Inject
     * @var Session
     */
    protected $session;

    protected function errorAction()
    {
        die('foo');
        return parent::errorAction(); // TODO: Change the autogenerated stub
    }

    /**
     * @return string
     */
    public function authenticateAction()
    {
        return parent::authenticateAction(); // TODO: Change the autogenerated stub
    }

    /**
     * @param ActionRequest|null $originalRequest
     */
    protected function onAuthenticationSuccess(ActionRequest $originalRequest = null)
    {
        $tokenHash = $this->request->getArgument('_authenticationHashToken');
        $token = $this->hashAndRolesRepository->findByIdentifier($tokenHash);
        if (!$token) {
            return;
        }

        $workspaceName = $token->getSettings()['workspaceName'] ?? '';
        if (empty($workspaceName)) {
            return;
        }

        $this->redirectToWorkspace($workspaceName);
    }

    /**
     * @param string $workspaceName
     * @throws \Neos\Flow\Mvc\Exception\StopActionException
     */
    protected function redirectToWorkspace(string $workspaceName)
    {
        /** @var ContentContext $context */
        $context = $this->contextFactory->create(['workspaceName' => $workspaceName]);
        $siteNode = $context->getCurrentSiteNode();

        $this->session->start();
        $this->getControllerContext()->getResponse()->setCookie($this->session->getSessionCookie());
        $this->redirect('show', 'Frontend\Node', 'Neos.Neos', ['node' => $siteNode]);
    }
}
